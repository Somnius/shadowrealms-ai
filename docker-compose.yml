services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./data:/app/data
      - ./backend:/app
      - ./data/logs:/app/logs
      - ./books:/app/books
      - ./README.md:/app/README.md:ro
    environment:
      - VERSION=${VERSION}
      - FLASK_ENV=development
      - FLASK_APP=main.py
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
      - FLASK_DEBUG=false
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      # PostgreSQL Configuration (credentials from .env - gitignored)
      - DATABASE_TYPE=${DATABASE_TYPE}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_NAME=${POSTGRES_DB}
      - DATABASE_USER=${POSTGRES_USER}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - CHROMADB_HOST=localhost
      - CHROMADB_PORT=8000
      - REDIS_HOST=localhost
      - REDIS_PORT=6379
      - GPU_THRESHOLD_HIGH=80
      - GPU_THRESHOLD_MEDIUM=60
      - LOG_LEVEL=INFO
      - LOG_FILE=/app/logs/backend.log
      # LLM Service Configuration
      - LM_STUDIO_URL=http://localhost:1234
      - LM_STUDIO_API_KEY=${LM_STUDIO_API_KEY:-}
      - LM_STUDIO_MODEL=${LM_STUDIO_MODEL:-mythomakise-merged-13b}
      - LM_STUDIO_TIMEOUT=${LM_STUDIO_TIMEOUT:-30}
      - OLLAMA_URL=http://localhost:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL:-command-r:35b}
      - OLLAMA_TIMEOUT=${OLLAMA_TIMEOUT:-30}
    depends_on:
      - chromadb
      - postgresql
      - monitoring
    network_mode: "host"
    restart: unless-stopped

  postgresql:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      # ⚠️  Credentials loaded from .env file (gitignored)
      # See docs/POSTGRESQL_ENV_SETUP.md for secure credential generation
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./backend/init_postgresql_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    networks:
      - shadowrealms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  chromadb:
    image: chromadb/chroma:latest
    ports:
      - "8000:8000"
    volumes:
      - ./data/vector_db:/data
    networks:
      - shadowrealms-network
    restart: unless-stopped

  monitoring:
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    volumes:
      - ./data/logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - shadowrealms-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=/api
    depends_on:
      - backend
    networks:
      - shadowrealms-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - shadowrealms-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    network_mode: "host"
    restart: unless-stopped

volumes:
  redis_data:
  postgresql_data:

networks:
  shadowrealms-network:
    driver: bridge
